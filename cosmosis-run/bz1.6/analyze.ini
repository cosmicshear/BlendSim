;***********************************
;multinest is the default sampler
;***********************************

[DEFAULT]
SAMPLER_USED=multinest ; test ; test ;fisher ;emcee
REGIME=zsnb  ;zsb_5percent 
BASELINE_DIR=.
TWOPOINT_DIR=/global/cscratch1/sd/erfanxyz/projects/blending/corrs/%(REGIME)s/all_realizations_combined
INPUT_FILE = %(TWOPOINT_DIR)s/cosmosis.twopoint.%(REGIME)s.fit
VALUE_FILE = %(BASELINE_DIR)s/values.ini
OUTPUT_FILE = %(BASELINE_DIR)s/chain_%(REGIME)s_%(SAMPLER_USED)s_all3_scalecut.txt
2PT_DATA_SETS = XIP XIM WTHETA ;WTHETA GAMMAT XIP XIM ; used in [2pt_like]

; maxlike 45 min
[runtime] 
sampler = %(SAMPLER_USED)s ;fisher ;test ;fisher ; emcee ;multinest ;test ; fisher
root = ${COSMOSIS_SRC_DIR} ; root for `file` fields


; [grid]
; nsample_dimension=20

[output]
filename=%(OUTPUT_FILE)s
format=text
verbosity= debug


;***********************************
; Samplers
;***********************************

; This is the one we are using right now.
; to switch to one of the others, change the sampler at the top.
; [emcee]
; walkers = 64
; samples = 400
; nsteps = 10

; The emcee sampler uses the concept of walkers, a collection
; ; of live points.  Sampling is done along lines that connect
; ; pairs of walkers.  The number of walkers must be at least
; ; 2*nparam + 1, but in general more than that usually works
; ; better.
; burn=0.3
; walkers = 160
; ; ; This many samples is overkill, just to make the plots
; ; ; look a lot nicer
; samples = 1000000
; ; ; This is the interval at which convergence diagnostics
; ; ; are performed
; nsteps = 5


; walkers = 200
; samples = 100
; start_points = start.txt
; nsteps = 50

[multinest]
fatal_errors=T
max_iterations=50000
; live_points=250
multinest_outfile_root=%(BASELINE_DIR)s/%(REGIME)s_multinest/%(REGIME)s_ 
resume=F
;- Suggested standard run:
; live_points=800
; efficiency=0.8
; tolerance=5
; constant_efficiency=F
;- Suggested standard run:
live_points=500
efficiency=0.3
tolerance=0.1
constant_efficiency=F
; mega-run
; live_points=800
; efficiency=0.05
; tolerance=0.1
; constant_efficiency=T


[test]
save_dir=%(BASELINE_DIR)s/fiducial_%(REGIME)s
fatal_errors=T
; analyze_fast_slow = T


; [fisher]
; step_size = 0.01

;***********************************
; Pipelines
;***********************************

; check https://github.com/des-science/2pt_pipeline/blob/master/pipeline/cosmosis_params_template.ini
; the main pipeline. It's a sequence of modules to run.
; the steps are:
; 1) consistency: calculate the simply derived cosmological parameters (e.g. omega_c = omega_m-omega_b)
; 2) camb: run the Boltzmann code to get the matter power spectrum
; 3) sigma8_rescale: rescale the camb outputs so we can sample in sigma_8 instead
; 4) halofit: get the nonlinear matter power spectrum 
; 5) extrapolate: extend the power spectra to high k
; 6) load_nz: get the photometric n(z) for our data
; 7) photoz_bias: apply the bias parameters for the photo-z to estimate the underlying model n(z) 
; 8) nonlinear_linear_alignment: use the NLA model to get intrinsic alignment 3D power spectra 
; 9) shear_shear: convert the 3D spectra into 2D tomographic C_ell with the Limber approximation
; 10) add_intrinsic: combine the intrinsic and shear terms together into the total observable C_ell
; 11) shear_m_bias: apply the shear measurement bias to predict the measured C_ell 
; 12) 2pt: integrate with Bessel functions to convert Fourier space C_ell into real space xi(theta)
; 13) 2pt_like: get the likelihood of the predicted correlation values

[pipeline]
;Control of extra info printed out
quiet=F 
timing=F
debug=T

modules = consistency camb sigma8_rescale halofit extrapolate load_nz growth pk_to_cl 2pt_shear 2pt_matter 2pt_ggl binwise_bias 2pt_like ;shear_m_bias binwise_bias ;shear_m_bias 
; nonlinear_linear_alignment ; add_intrinsic ; constant_bias ; shear_m_bias ; photoz_bias 
;modules = consistency camb sigma8_rescale halofit extrapolate load_nz growth clerkin_bias pk_to_cl 2pt_shear 2pt_matter 2pt_ggl 2pt_like
; fast_slow = T

; initial parameter values and their ranges and priors
values = %(VALUE_FILE)s
;priors = {priors_path}

; If you want to combine with additional likelihoods such as Planck;
; then you will need to add them here, e.g.  likelihoods = xipm planck euclid lsst
; likelihoods = %(REGIME)s_3x2pt ; at least should put your likelihood that is going to be saved in 2pt_like? No, it should already exist

; shortcut= clerkin_bias
;extra_output = cosmological_parameters/sigma_8


;***********************************
; Theory
;***********************************

; [ehu]
; file=cosmosis-standard-library/structure/cosmolopy_eisenstein_hu/cosmolopy_ehu.py

[load_nz]
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/number_density/load_nz_fits/load_nz_fits.py
nz_file = %(INPUT_FILE)s
data_sets= NZ_ALL NZ_LENS NZ_SOURCE
prefix_section=T ;? leave it for now ?
prefix_extension=F ;?
;upsampling = 2 ; this is complicated, and it matters for high precision comparisons

[consistency]
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/utility/consistency/consistency_interface.py

[camb]
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/boltzmann/camb/camb.so
mode=all
lmax=2500
feedback=0
; zmax=5.1
; nz=500
kmin=1e-5
kmax=10.0
nk=200
zmax=2.0
nz=301


; [ehu]
; file=cosmosis-standard-library/structure/cosmolopy_eisenstein_hu/cosmolopy_ehu.py

[extrapolate]
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/boltzmann/extrapolate/extrapolate_power.py 
kmax = 500.

[sigma8_rescale]
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/utility/sample_sigma8/sigma8_rescale.py

[halofit]
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/boltzmann/halofit_takahashi/halofit_interface.so
nk=700


; our bias model reqires the growth factor D(z).
; the linear growth rate and function will be calculated at given redshift. Arrays of D(z), f(z),z from z=100 to 0 are also output.
[growth]
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/structure/growth_factor/interface.so
zmin = 0.0
zmax = 2.0
dz = 0.01 ; this setup will calculate f(z) and d(z) in 201 bins (0.000000:2.000000:0.010000)

[no_bias]
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/bias/no_bias/no_bias.py

[clerkin_bias]
file= ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/bias/clerkin/clerkin_interface.py
mode = 'both'
model = 'gtd'
; bias_only = T ; wrong

; You could uncomment the constant bias value in the values file to use this
[constant_bias]
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/bias/constant_bias/constant_bias.py

[pk_to_cl]
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/structure/projection/project_2d.py
ell_min = 0.1 ;0.1
ell_max = 2.0e5
n_ell = 300 ;400
; Am I doing these right? should double check 
shear-shear = NZ_SOURCE-NZ_SOURCE
position-shear = NZ_LENS-NZ_SOURCE
position-position= NZ_ALL-NZ_ALL
; What about intrinsic?
; shear-intrinsic = NZ_SOURCE-NZ_SOURCE
; intrinsic-intrinsic = NZ_SOURCE-NZ_SOURCE
; position-intrinsic = NZ_LENS-NZ_SOURCE
;unbiased_galaxies=T
; intrinsic-intrinsic = F
; shear-intrinsic = F
verbose = T
;get_kernel_peaks=F


; [shear_m_bias]
; file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/shear/shear_bias/shear_m_bias.py
; m_per_bin = True
; verbose = F


; [smail_nz]
; file = cosmosis-standard-library/number_density/smail/photometric_smail.py
; zmax = 4.0
; dz = 0.01
; nbin = 10

; -----------------------------------------------------------------------------
; In case I am working with correlation functions instead of power spectra:
; -----------------------------------------------------------------------------
; This module converts angular spectra from c_ell to correlation functions w(theta).
; It is slow and can be a little dodgy at small theta, so if you have a better
; version it would be great if you be happy to add it (or have us add it) to cosmosis

[2pt_shear]
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/shear/cl_to_xi_nicaea/nicaea_interface.so
; theta_min = 1.0 ; unit??! should check
; theta_max = 50.0
; n_theta = 50
input_section_name = shear_cl
output_section_name = shear_xi
; Type of Hankel transform and output correlation function
; [0 = shear, 1 = matter, 2 = ggl]
corr_type = 0

[2pt_matter]
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/shear/cl_to_xi_nicaea/nicaea_interface.so
; theta_min = 1.0
; theta_max = 50.0
; n_theta = 50
input_section_name = galaxy_cl
output_section_name = galaxy_xi
corr_type = 1

[2pt_ggl]
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/shear/cl_to_xi_nicaea/nicaea_interface.so
; theta_min = 1.0
; theta_max = 50.0
; n_theta = 50
input_section_name = galaxy_shear_cl
output_section_name = galaxy_shear_xi
corr_type = 2

[binwise_bias]
file=${COSMOSIS_SRC_DIR}/cosmosis-standard-library/bias/binwise_bias/bin_bias.py
perbin=T
; bias_per_bin=T
; position_position=T
; position_shear=T



;***********************************
;likelihoods
;***********************************

[2pt_like]
file = ${COSMOSIS_SRC_DIR}/cosmosis-standard-library/likelihood/2pt/2pt_like.py
data_file=%(INPUT_FILE)s
data_sets=%(2PT_DATA_SETS)s
make_covariance=F
covmat_name=COVMAT
like_name=%(REGIME)s_3x2pt ; the name of the likelihood to save.
; save_plot_to = blendsim_pipeline_test
; You can add the Sellentin-Heavens correction for MC cov mat estimation
; by setting this to True (see arxiv 1511.05969)
;sellentin=F
; include_norm=T 

; scale cuts
; angle_range_XIP_1_1 = 4.  60.0
; angle_range_XI_PLUS_1_2 = 4.  60.0
; angle_range_XI_PLUS_1_3 = 4.  60.0
; angle_range_XI_PLUS_2_2 = 4.  60.0
; angle_range_XI_PLUS_2_3 = 2.  60.0
; angle_range_XI_PLUS_3_3 = 2.  60.0

; angle_range_XIM_1_1 = 20.  999.0
; angle_range_XIM_1_2 = 20.  999.0
; angle_range_XIM_1_3 = 20.  999.0
; angle_range_XIM_2_2 = 10.  999.0
; angle_range_XIM_2_3 = 10.  999.0
; angle_range_XIM_3_3 = 10.  999.0

; angle_range_WTHETA_1_1 = 20.  999.0
; angle_range_WTHETA_1_2 = 20.  999.0
; angle_range_WTHETA_1_3 = 20.  999.0
; angle_range_WTHETA_1_4 = 20.  999.0
; angle_range_WTHETA_2_2 = 20.  999.0
; angle_range_WTHETA_2_3 = 20.  999.0
; angle_range_WTHETA_2_4 = 20.  999.0
; angle_range_WTHETA_3_3 = 20.  999.0
; angle_range_WTHETA_3_4 = 20.  999.0

; angle_range_GAMMAT_1_1 = 20.  999.0
; angle_range_GAMMAT_1_2 = 20.  999.0
; angle_range_GAMMAT_1_3 = 20.  999.0
; angle_range_GAMMAT_2_2 = 20.  999.0
; angle_range_GAMMAT_2_3 = 20.  999.0
; angle_range_GAMMAT_3_3 = 20.  999.0

